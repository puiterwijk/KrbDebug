#!/bin/python
# Copyright (c) 2016, Patrick Uiterwijk <patrick@puiterwijk.org>
# All rights reserved.
#
# DebugKrb is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DebugKrb is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DebugKrb.  If not, see <http://www.gnu.org/licenses/>.

import os
import subprocess
import sys
import unittest

try: 
    import distro
    oldpython = False
except ImportError:
    import platform
    oldpython = True

class TestKerberos(unittest.TestCase):
    def _call(self, cmd, stdin=None, **kwargs):
        p = subprocess.Popen(cmd,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             stdin=subprocess.PIPE,
                             **kwargs)
        stdout, stderr = p.communicate(stdin)
        return p.returncode, stdout, stderr

    def test_01_installed(self):
        _, _, stderr = self._call(['kinit', '--help'])
        
        self.assertIn(b'option', stderr,
                      'kinit not installed: dnf install krb5-workstation')
    
    def test_02_using_collection(self):
        _, stdout, stderr = self._call(['klist'])
        if b'keyring' not in stderr and b'DIR:' not in stderr and \
                b'KEYRING' not in stdout and b'DIR:' not in stdout:
            self.fail('Not a collection cache in use: add "default_ccache_name'
                      ' = KEYRING:persistent:%{uid}" to /etc/krb5.conf under '
                      '[libdefaults]')
    
    def test_03_configuration(self):
   
        if oldpython:
            distro_version = platform.dist()[1]
        else:
            distro_version = int(distro.version())
        
        with open('/etc/krb5.conf', 'r') as f:
            krb5_conf = f.read()

        if 'https://id.fedoraproject.org/KdcProxy' in krb5_conf:
            # They probably have a correct configuration 
            return

        
        if distro_version < 6:
            if oldpython:
                self.fail('%s %s not supported' % platform.dist()[:2])
            else:
                self.fail('%s %s not supported' % distro.version()[:2])

        elif distro_version == 6:
            # TODO
            self.fail('TODO')
        else:
            # distro >6, check conf.d
            self.assertIn('includedir /etc/krb5.conf.d', krb5_conf, 'Config: '
                          'includedir not in configuration. Add "includedir '
                          '/etc/krb5.conf.d/" as top line in /etc/krb5.conf')

            for f in os.listdir('/etc/krb5.conf.d'):
                name = os.path.join('/etc/krb5.conf.d', f)
                if os.path.isfile(name):
                    with open(name, 'r') as fp:
                        if 'https://id.fedoraproject.org/KdcProxy' in fp.read():
                            if '.' in f:
                                self.fail('Fedora config file name %s contains'
                                          ' period. Please move to file '
                                          'without period' % name)
                            return

            self.fail('Unable to find krb5 configuration file for Fedora')
            
    def test_04_kinit(self):
        _, stdout, stderr = self._call(['kinit', 'test_us@FEDORAPROJECT.ORG'],
                                       env={'KRB5_TRACE': '/dev/stdout'},
                                       stdin=b'nopassword')

        self.assertNotIn(b'HTTP/1.1 503', stdout, 'Error occured on the server '
                         'side. Please inform Infrastructure team')

        self.assertNotIn(b'Cannot find KDC for realm', stderr, 'Configuration '
                         'issue. Please ask Infrastructure team')

        self.assertNotIn(b'HTTPS error', stdout, 'TLS Error caused by OpenSSL, '
                         'please downgrade OpenSSL to 1.0.0b or earlier')

        self.assertIn(b'not found in Kerberos database', stderr, 'Strange error'
                      ' occured. Please tell puiterwijk you got: %s' % stderr)
        
if __name__ == '__main__':
    unittest.main(verbosity=2, argv=[sys.argv[0]])
